# Set the kernel and user source directories
K=kernel
U=user

# --- Define Kernel Subset Sources to Concatenate ---
# List ONLY the specific kernel files you want to include in the hash.
# Consistent order is CRITICAL for the hash value to be stable.
KERNEL_SUBSET_SOURCES := \
  $(K)/bio.c \
  $(K)/console.c \
  $(K)/file.c \
  $(K)/exec.c \
  # Add any other specific files you want IN THIS SUBSET here.

# Name for the temporary concatenated file (contains the subset)
KERNEL_ALL_TMP = $(K)/subset_sources.tmp # Renamed temp file for clarity

# Name for the generated C file containing the concatenated subset content
EMBEDDED_ALL_C = $(K)/embedded_subset_sources.c # Renamed C file
EMBEDDED_ALL_O = $(K)/embedded_subset_sources.o # Corresponding object file

# List of kernel object files
# Includes the object file compiled from the embedded C code
OBJS = \
  $(K)/entry.o \
  $(K)/start.o \
  $(K)/console.o \
  $(K)/printf.o \
  $(K)/uart.o \
  $(K)/kalloc.o \
  $(K)/spinlock.o \
  $(K)/string.o \
  $(K)/main.o \
  $(K)/vm.o \
  $(K)/proc.o \
  $(K)/swtch.o \
  $(K)/trampoline.o \
  $(K)/trap.o \
  $(K)/syscall.o \
  $(K)/sysproc.o \
  $(K)/bio.o \
  $(K)/fs.o \
  $(K)/log.o \
  $(K)/sleeplock.o \
  $(K)/file.o \
  $(K)/pipe.o \
  $(K)/exec.o \
  $(K)/sysfile.o \
  $(K)/kernelvec.o \
  $(K)/plic.o \
  $(K)/virtio_disk.o \
  $(K)/sha256.o \
  $(EMBEDDED_ALL_O) # <-- ADD the object file for the embedded subset sources

# Toolchain prefix (e.g., riscv64-unknown-elf-)
# Try to infer the correct TOOLPREFIX if not set
ifndef TOOLPREFIX
TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
	then echo 'riscv64-unknown-elf-'; \
	elif riscv64-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
	then echo 'riscv64-linux-gnu-'; \
	elif riscv64-unknown-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
	then echo 'riscv64-unknown-linux-gnu-'; \
	else echo "***" 1>&2; \
	echo "*** Error: Couldn't find a riscv64 version of GCC/binutils." 1>&2; \
	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
	echo "***" 1>&2; exit 1; fi)
endif

# QEMU command
QEMU = qemu-system-riscv64

# Toolchain commands
CC = $(TOOLPREFIX)gcc
AS = $(TOOLPREFIX)gas
LD = $(TOOLPREFIX)ld
OBJCOPY = $(TOOLPREFIX)objcopy
OBJDUMP = $(TOOLPREFIX)objdump

# C compiler flags
CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
CFLAGS += -MD
CFLAGS += -mcmodel=medany
CFLAGS += -fno-common -nostdlib
CFLAGS += -fno-builtin-strncpy -fno-builtin-strncmp -fno-builtin-strlen -fno-builtin-memset
CFLAGS += -fno-builtin-memmove -fno-builtin-memcmp -fno-builtin-log -fno-builtin-bzero
CFLAGS += -fno-builtin-strchr -fno-builtin-exit -fno-builtin-malloc -fno-builtin-putc
CFLAGS += -fno-builtin-free
CFLAGS += -fno-builtin-memcpy -Wno-main
CFLAGS += -fno-builtin-printf -fno-builtin-fprintf -fno-builtin-vprintf
CFLAGS += -I.
CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)

# Disable PIE when possible (for Ubuntu 16.10 toolchain)
ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
CFLAGS += -fno-pie -no-pie
endif
ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
CFLAGS += -fno-pie -nopie
endif

# Linker flags
LDFLAGS = -z max-page-size=4096

# --- Rule to Concatenate Specified Kernel Subset Source Files ---
# Uses the KERNEL_SUBSET_SOURCES list defined above
$(KERNEL_ALL_TMP): $(KERNEL_SUBSET_SOURCES) Makefile
	@echo "CAT Kernel Subset Sources -> $@"
	@rm -f $@ # Remove old temporary file if it exists
	@cat $(KERNEL_SUBSET_SOURCES) > $@

# --- Rule to generate the embedded C file from the Concatenated Subset Temp File ---
# Input is KERNEL_ALL_TMP (subset_sources.tmp). Output is EMBEDDED_ALL_C (embedded_subset_sources.c).
# Variable names generated by xxd will be based on the temporary filename (kernel_subset_sources_tmp).
$(EMBEDDED_ALL_C): $(KERNEL_ALL_TMP) Makefile
	@echo "GEN $< -> $@"
	@# Generate the C array using xxd. Array name based on temp filename: kernel_subset_sources_tmp
	@xxd -i $< > $@
	@# Add alignment attribute to the generated array definition. Escape brackets for sed.
	@sed -i 's/unsigned char kernel_subset_sources_tmp\[\]/unsigned char kernel_subset_sources_tmp[] __attribute__((aligned(16)))/' $@
	@# Add alignment attribute to the size variable definition generated by xxd.
	@sed -i 's/unsigned int kernel_subset_sources_tmp_len/unsigned int kernel_subset_sources_tmp_len __attribute__((aligned(16)))/' $@

# --- Kernel Link Rule ---
# Make the kernel depend on the generated C file (EMBEDDED_ALL_C)
$K/kernel: $(OBJS) $(K)/kernel.ld $U/initcode $(EMBEDDED_ALL_C) # <-- Kernel depends on the embedded C file
	$(LD) $(LDFLAGS) -T $(K)/kernel.ld -o $(K)/kernel $(OBJS)
	$(OBJDUMP) -S $(K)/kernel > $(K)/kernel.asm
	$(OBJDUMP) -t $(K)/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(K)/kernel.sym

# Rule for building the initial user program (initcode)
$U/initcode: $U/initcode.S
	$(CC) $(CFLAGS) -march=rv64g -nostdinc -I. -Ikernel -c $U/initcode.S -o $U/initcode.o
	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o $U/initcode.out $U/initcode.o
	$(OBJCOPY) -S -O binary $U/initcode.out $U/initcode
	$(OBJDUMP) -S $U/initcode.o > $U/initcode.asm

# Rule for generating ctags (you might want to adjust the source list here if needed)
tags: $(wildcard kernel/*.[chS]) $(U)/user.h user/*.[chS]
	etags $(wildcard kernel/*.[chS]) $(U)/user.h user/*.[chS]

# User library object files
ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o

# Rule for linking user programs
_%: %.o $(ULIB)
	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
	$(OBJDUMP) -S $@ > $*.asm
	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym

# Rule for generating the system call stubs (usys.S)
# Make sure syscall.h exists in the top-level directory
$U/usys.S : $U/usys.pl syscall.h
	perl $U/usys.pl syscall.h > $U/usys.S

# Rule for compiling the system call stubs
$U/usys.o : $U/usys.S
	$(CC) $(CFLAGS) -c -o $U/usys.o $U/usys.S

# Special rule for forktest (links differently)
$U/_forktest: $U/forktest.o $(ULIB)
	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $U/_forktest $U/forktest.o $U/ulib.o $U/usys.o
	$(OBJDUMP) -S $U/_forktest > $U/forktest.asm

# Rule for building the mkfs tool
mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
	gcc -Werror -Wall -I. -o mkfs/mkfs mkfs/mkfs.c

# Prevent deletion of intermediate files (like .o files)
.PRECIOUS: %.o

# List of user programs to include in the filesystem image
UPROGS=\
	$U/_cat\
	$U/_echo\
	$U/_forktest\
	$U/_grep\
	$U/_init\
	$U/_kill\
	$U/_ln\
	$U/_ls\
	$U/_mkdir\
	$U/_rm\
	$U/_sh\
	$U/_stressfs\
	$U/_usertests\
	$U/_grind\
	$U/_wc\
	$U/_zombie\
	$U/_helloq\
	$U/_sha_syscall\
	$U/_clock\
	$U/_uptime\
	$U/_testingtime\
	$U/_getmemory\
	$U/_sha256\

# Rule for creating the filesystem image
fs.img: mkfs/mkfs README sample.txt $(UPROGS)
	mkfs/mkfs fs.img README sample.txt $(UPROGS)

# Include automatically generated dependency files (*.d)
-include kernel/*.d user/*.d

# --- Clean Rule ---
clean:
# IMPORTANT: The next 7 command lines MUST start with a TAB character, not spaces.
	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
	    */*.o */*.d */*.asm */*.sym \
	    $U/initcode $U/initcode.out $K/kernel fs.img \
	    mkfs/mkfs .gdbinit \
	    $U/usys.S \
	    $(UPROGS) \
	    $(KERNEL_ALL_TMP) $(EMBEDDED_ALL_C)

# Try to generate a unique GDB port based on user ID
GDBPORT = $(shell expr `id -u` % 5000 + 25000)
# Determine QEMU GDB command line syntax
QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
	then echo "-gdb tcp::$(GDBPORT)"; \
	else echo "-s -p $(GDBPORT)"; fi)

# Default number of CPUs for QEMU if not specified
ifndef CPUS
CPUS := 3
endif

# QEMU options
QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
QEMUOPTS += -global virtio-mmio.force-legacy=false
QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0
QEMUOPTS += -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0

# Rule to run QEMU
qemu: $K/kernel fs.img
	$(QEMU) $(QEMUOPTS)

# Rule to generate the .gdbinit file for GDB connection
.gdbinit: .gdbinit.tmpl-riscv
	sed "s/:1234/:$(GDBPORT)/" < $^ > $@

# Rule to run QEMU with GDB server enabled
qemu-gdb: $K/kernel .gdbinit fs.img
	@echo "*** Now run 'gdb' in another window." 1>&2
	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)

# Phony targets to avoid conflicts with files named 'clean' or 'tags'
.PHONY: clean tags qemu qemu-gdb
